---
title: "Benchmarking four methods to read multiple rasters files in R."
description: |
  Testing the performance of four different methods of reading in multiple raster files to reduce processing time in my modelling work.
author:
  - name: Thomas Zwagerman
    url: https://twitter.com/thomzwa
    affiliation: Centre for Ecology & Hydrology
    affiliation_url: https://www.ceh.ac.uk/
date: 08-12-2021
output:
  distill::distill_article:
    self_contained: false
    code_folding: true
    toc: true
categories:
  - rspatial
  - raster
  - terra
  - benchmark
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
```

```{r preview,echo=FALSE}
knitr::include_graphics("preview.jpg")
```
<aside>
Photo by <a href="https://unsplash.com/@oskaryil?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Oskar Yildiz</a> on <a href="https://unsplash.com/s/photos/programming?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
</aside>

# A need for efficiency
I've recently been working on a project where lots of rasters would need to be processed, put together into a dataframe and then combined with other spatial data. That combined dataset would then need to be processed and written out again. 

In other words, a pretty long workflow - which can be quite prone to error. Having to do re-runs of such a lengthy process is not only annoying but also extremely time consuming.

For that reason I thought I'd test some different ways of processing rasters, so that at least the upfront processing time for each re-run is minimised.

# Processing raster files
I can't share the rasters I used for my project, so instead I'm working with a small dataset from the FAO, called [Gridded Livestock of the World](http://www.fao.org/livestock-systems/global-distributions/en/). Pretty much what it says on the tin, with different rasters for each animal type. For example here is the raster for cattle: 

```{r directory_numbers, warning = FALSE, echo = FALSE, message=FALSE, code_folding=TRUE}
#Libraries----
library(tidyverse)
library(raster)
library(sf)
library(microbenchmark)
library(stars)
library(ggplot2)
library(knitr)
library(terra)

lu_dir <- paste0(getwd(),"/glw_rasters/")
l_files <- list.files(lu_dir, pattern = ".tif")
l_files <- paste0(lu_dir,l_files)
p1 <- rast(l_files[1])
plot(p1)
```

It's a good dataset for this purpose as it's relatively lightweight and I already know all rasters are the same extent. Now let's have a look at the different methods of reading in multiple raster files.

# The four methods
In total I'm looking at four methods, **stack()**, using **raster()** within an **lapply** function and then using **stack()** once read in, **read_stars** and finally **rast()**. This is by no means an exhaustive list but these are the main ones I could think of as of August 2021.

### stack()
The first method is the one I used during my project, which is **stack()**. The reason I went for **stack()** is that it's probably the most concise method of stacking a large number of rasters, because you read the raster files straight into a stack. But... I had a feeling this was maybe taking more time than I'd like.

```{r stack_method, warning = FALSE, message=FALSE, echo = TRUE, results=FALSE, eval = FALSE,code_folding=FALSE}
stack(l_files)
```

### lapply(l_files, raster), and then stack()
A method I was curious about after reading [Chapter 3 of Efficient R programming](https://csgillespie.github.io/efficientR/programming.html#the-apply-family) by Colin Gillespie and Robin Lovelace, is whether using **lapply()** to individually reading in rasters into a list, and then stacking them is faster than reading in the rasters into a stack straight away.

Of course, that is multiple functions, so to make it work within microbenchmark, I'm defining it into a single function here. Normally I probably wouldn't bother doing that.

```{r lapply_method, warning = FALSE, message=FALSE, echo = TRUE, results=FALSE, code_folding=FALSE}
func_apply_n_raster <- function(files_to_read){
#reading the rasters in individually, into a list object
l_rasters <- lapply(files_to_read, raster)
#then stack the read in list object into a single stack
s_rasters <- stack(l_rasters)
return(s_rasters)
}
```

### read_stars()
A package I've been curious about for a while, but haven't found an excuse to use yet, is [stars](https://r-spatial.github.io/stars/) with the **read_stars()** function. Now I have no idea how this works in the background, so I don't know if this will be faster, but that's the fun of the experiment.

```{r stars_method, warning = FALSE, message=FALSE, echo = TRUE, results=FALSE, eval = FALSE, code_folding=FALSE}
read_stars(l_files)
```

### rast()
Another new package is [terra](https://github.com/rspatial/terra), which is inteded to replace raster. Unlike **raster()**, the **rast()** function in terra already reads in multiple rasters, so there's no need to write a function in combination with **lapply()** as we did for **raster()**.

```{r terra_method, warning = FALSE, message=FALSE, echo = TRUE, results=FALSE, code_folding=FALSE}
rast(l_files)
```

# Running the benchmark
Now I've given a sample of the 4 methods, let's run the benchmark and see which is fastest.

```{r benchmark, warning = FALSE, message=FALSE, code_folding=TRUE}
res <- microbenchmark(
  stack = stack(l_files),
  lapply_and_raster = func_apply_n_raster(l_files),
  read_stars = read_stars(l_files),
  terra_rast = rast(l_files),
  times = 100
)
#the reason I'm passing a summary() function through to kable is that
#kable (or any paged table function) doesn't provide expected output with a microbenchmark output
#see this open issue https://github.com/rstudio/rmarkdown/issues/1469
kable(summary(res))
```

The method I used throughout my project's lifetime, **stack()**, has not come out too well in this test. On average, **read_stars()** is the slowest method, but perhaps reading in multiple rasters wasn't the purpose it was optimised for specifically. The **lapply(l_files, raster)** + **stack()** method is a wee bit faster than **stack()** on its own, as I suspected, but terra's **rast()** knocks both of these out of the park. I think this means it is time for me properly look into terra and start replacing raster in my workflow.

Let's plot it as well to visualise the range here:

```{r benchmark_plot, warning = FALSE, code_folding =TRUE}
autoplot(res)

```

So **lapply(l_files, raster)** + **stack()** are definitely faster than **read_stars()** on average. While **stack()** on its own is a wee bit slower than **lapply(l_files, raster)** + **stack()**, they do mostly overlap. In this case I think it seems to be a tradeoff between more concise code in just **stack()** or a slightly faster processing time calling multiple functions, but the difference is minimal.

Terra's **rast()** however, has both. It's far more concise and much faster. Another benefit seems to be that there is no differentiation between **stack()** and **raster()**, so whether reading in a large folder of rasters or reading in a single raster the user doesn't have to use a different function.

# In summary
It's time to update my scripts and learn to use the terra package, as it's the most concise and efficient way of reading in multiple raster files at once. It's also rewarding that after reading [Chapter 3 of Efficient R programming](https://csgillespie.github.io/efficientR/programming.html#the-apply-family) I can actually apply some of the lessons in improving efficiency to my own script, and if it wasn't for **rast()**, using **lapply(l_files, raster)** + **stack()** instead of just **stack()** my workflow would have also improved. 

In the future I might write another blog post to test different methods of reading in NetCDF files as I frequently use those too, and I'm curious to see how big the differences are there. I'd expect more from stars in that one!

