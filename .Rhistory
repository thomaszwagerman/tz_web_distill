rownames(constituency_shp_mapping) <- 1:nrow(constituency_shp_mapping)
#calling our mapview function on the constituency_shp_mapping object
mapview(constituency_shp_mapping,
#specifying which column's information we want to show
zcol = "Win",
#and specify the colours, we can just select the relevant column
col.regions = constituency_shp_mapping$colour_code,
#and call on our barchart list to pop up
popup = popupGraph(bar_plot_list, width = 225,height =150),
legend = TRUE,
layer.name = "Party"
)
#joining the constiuency shapefile with the winner dataframe
constituency_shp_mapping <- left_join(constituency_shp,winner_df, by = c("spc16cd"="ONS Code"))
#the shapefile and results excel sheet had slightly different naming conventions
#for the Liberal Democrats so we have to manually change these a little.
#make it all caps
constituency_shp_mapping$Win <- toupper(constituency_shp_mapping$Win)
#Swap LD to LIB
constituency_shp_mapping$Win <- gsub("LD","LIB",constituency_shp_mapping$Win)
#Now join with the colour codes
constituency_shp_mapping <- left_join(constituency_shp_mapping,party_colours,by = c("Win"="party"))
#reorder
constituency_shp_mapping <- constituency_shp_mapping[order(constituency_shp_mapping$spc16cd),]
#reset rownumbers so they line up
rownames(constituency_shp_mapping) <- 1:nrow(constituency_shp_mapping)
#calling our mapview function on the constituency_shp_mapping object
mapview(constituency_shp_mapping,
#specifying which column's information we want to show
zcol = "Win",
#and specify the colours, we can just select the relevant column
col.regions = constituency_shp_mapping$colour_code,
#and call on our barchart list to pop up
popup = popupGraph(bar_plot_list, width = 225,height =225),
legend = TRUE,
layer.name = "Party"
)
#this might not be needed for the 2021 result, but for some reason
#there is an ONS code discrepancy between the results and our constituency shapefile.
#So here I manually change some codes
constituency_shp$spc16cd[which(constituency_shp$spc16cd == "S16000147")] <- voteshare_df$`ONS Code`[which(voteshare_df$Constituency=="Glasgow Provan")][1]
constituency_shp$spc16cd[which(constituency_shp$spc16cd == "S16000148")] <- voteshare_df$`ONS Code`[which(voteshare_df$Constituency=="Strathkelvin & Bearsden")][1]
#reordering our order of codes to match the shapefile
voteshare_df <- voteshare_df[order(voteshare_df$`ONS Code`),]
#reset rownumbers so they line up
rownames(voteshare_df) <- 1:nrow(voteshare_df)
#hopefully I won't have to repeat that step for the 2021 data!
#start of our list creation
bar_plot_list <- lapply(unique(voteshare_df$`ONS Code`), function(i) {
#filter and group info per ONS code
regio_df <- voteshare_df %>%
filter(`ONS Code` == i) %>%
dplyr::ungroup() %>%
select(party,share,Constituency) %>%
filter(share >0.1) %>%
as.data.frame()
#order by the vote share
regio_df <- regio_df[order(regio_df$share,decreasing = T),]
regio_df$share <- round(regio_df$share,1)
#rejoin with the colourscheme
regio_df <- left_join(regio_df,party_colours)
#now making the bar chart!
ggplot(regio_df) +
geom_bar(aes(x = party, y = share, fill = party),
stat = "identity",
colour = "black", width =1) +
#adding the vote share as text
geom_text(aes(x = party, y = share, label = paste0(share,"%")), vjust = -0.5, size = 3.5)+
#coord_polar("y", start = 0) +
labs(x = NULL, y = NULL, fill = NULL,
title = paste("Election result",unique(regio_df$Constituency))) +
theme_classic()+
#making sure it's ordered from biggest to smallest party
scale_x_discrete(limits = regio_df$party)+
#making sure the colours are automatically matched to the corresponding party
scale_fill_manual(values = regio_df$colour_code,
limits = regio_df$party)+
#setting the theme
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black"),
legend.position = "bottom")
})
#creating the edinburgh south example using the same method as above
edi_south <- voteshare_df %>%
filter(`ONS Code` == "S16000108") %>%
dplyr::ungroup() %>%
select(party,share,Constituency) %>%
filter(share >0.1) %>%
as.data.frame()
edi_south <- left_join(edi_south,party_colours)
edi_south$share <- round(edi_south$share,1)
#reorder so it displays from biggest to smallest
edi_south <- edi_south[order(edi_south$share,decreasing = T),]
#plotting Edinburgh South to be displayed on the webpage as an example
ggplot(edi_south) +
geom_bar(aes(x = party, y = share, fill = party),
stat = "identity",
colour = "black", width =1) +
geom_text(aes(x = party, y = share, label = paste0(share,"%")), vjust = -0.5, size = 3.5)+
#coord_polar("y", start = 0) +
labs(x = NULL, y = NULL, fill = NULL,
title = paste(unique(edi_south$Constituency))) +
theme_classic()+
scale_x_discrete(limits = edi_south$party)+
scale_fill_manual(values = edi_south$colour_code,
limits = edi_south$party)+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black"),
legend.position = "bottom")
#this might not be needed for the 2021 result, but for some reason
#there is an ONS code discrepancy between the results and our constituency shapefile.
#So here I manually change some codes
constituency_shp$spc16cd[which(constituency_shp$spc16cd == "S16000147")] <- voteshare_df$`ONS Code`[which(voteshare_df$Constituency=="Glasgow Provan")][1]
constituency_shp$spc16cd[which(constituency_shp$spc16cd == "S16000148")] <- voteshare_df$`ONS Code`[which(voteshare_df$Constituency=="Strathkelvin & Bearsden")][1]
#reordering our order of codes to match the shapefile
voteshare_df <- voteshare_df[order(voteshare_df$`ONS Code`),]
#reset rownumbers so they line up
rownames(voteshare_df) <- 1:nrow(voteshare_df)
#hopefully I won't have to repeat that step for the 2021 data!
#start of our list creation
bar_plot_list <- lapply(unique(voteshare_df$`ONS Code`), function(i) {
#filter and group info per ONS code
regio_df <- voteshare_df %>%
filter(`ONS Code` == i) %>%
dplyr::ungroup() %>%
select(party,share,Constituency) %>%
filter(share >0.1) %>%
as.data.frame()
#order by the vote share
regio_df <- regio_df[order(regio_df$share,decreasing = T),]
regio_df$share <- round(regio_df$share,1)
#rejoin with the colourscheme
regio_df <- left_join(regio_df,party_colours)
#now making the bar chart!
ggplot(regio_df) +
geom_bar(aes(x = party, y = share, fill = party),
stat = "identity",
colour = "black", width =1) +
#adding the vote share as text
geom_text(aes(x = party, y = share, label = paste0(share,"%")), vjust = -0.5, size = 3.5)+
#coord_polar("y", start = 0) +
labs(x = NULL, y = NULL, fill = NULL,
title = paste(unique(regio_df$Constituency))) +
theme_classic()+
#making sure it's ordered from biggest to smallest party
scale_x_discrete(limits = regio_df$party)+
#making sure the colours are automatically matched to the corresponding party
scale_fill_manual(values = regio_df$colour_code,
limits = regio_df$party)+
#setting the theme
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black"),
legend.position = "bottom")
})
#creating the edinburgh south example using the same method as above
edi_south <- voteshare_df %>%
filter(`ONS Code` == "S16000108") %>%
dplyr::ungroup() %>%
select(party,share,Constituency) %>%
filter(share >0.1) %>%
as.data.frame()
edi_south <- left_join(edi_south,party_colours)
edi_south$share <- round(edi_south$share,1)
#reorder so it displays from biggest to smallest
edi_south <- edi_south[order(edi_south$share,decreasing = T),]
#plotting Edinburgh South to be displayed on the webpage as an example
ggplot(edi_south) +
geom_bar(aes(x = party, y = share, fill = party),
stat = "identity",
colour = "black", width =1) +
geom_text(aes(x = party, y = share, label = paste0(share,"%")), vjust = -0.5, size = 3.5)+
#coord_polar("y", start = 0) +
labs(x = NULL, y = NULL, fill = NULL,
title = paste("Constituency result",unique(edi_south$Constituency))) +
theme_classic()+
scale_x_discrete(limits = edi_south$party)+
scale_fill_manual(values = edi_south$colour_code,
limits = edi_south$party)+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black"),
legend.position = "bottom")
#joining the constiuency shapefile with the winner dataframe
constituency_shp_mapping <- left_join(constituency_shp,winner_df, by = c("spc16cd"="ONS Code"))
#the shapefile and results excel sheet had slightly different naming conventions
#for the Liberal Democrats so we have to manually change these a little.
#make it all caps
constituency_shp_mapping$Win <- toupper(constituency_shp_mapping$Win)
#Swap LD to LIB
constituency_shp_mapping$Win <- gsub("LD","LIB",constituency_shp_mapping$Win)
#Now join with the colour codes
constituency_shp_mapping <- left_join(constituency_shp_mapping,party_colours,by = c("Win"="party"))
#reorder
constituency_shp_mapping <- constituency_shp_mapping[order(constituency_shp_mapping$spc16cd),]
#reset rownumbers so they line up
rownames(constituency_shp_mapping) <- 1:nrow(constituency_shp_mapping)
#calling our mapview function on the constituency_shp_mapping object
mapview(constituency_shp_mapping,
#specifying which column's information we want to show
zcol = "Win",
#and specify the colours, we can just select the relevant column
col.regions = constituency_shp_mapping$colour_code,
#and call on our barchart list to pop up
popup = popupGraph(bar_plot_list, width = 450,height =300),
legend = TRUE,
layer.name = "Party"
)
#joining the constiuency shapefile with the winner dataframe
constituency_shp_mapping <- left_join(constituency_shp,winner_df, by = c("spc16cd"="ONS Code"))
#the shapefile and results excel sheet had slightly different naming conventions
#for the Liberal Democrats so we have to manually change these a little.
#make it all caps
constituency_shp_mapping$Win <- toupper(constituency_shp_mapping$Win)
#Swap LD to LIB
constituency_shp_mapping$Win <- gsub("LD","LIB",constituency_shp_mapping$Win)
#Now join with the colour codes
constituency_shp_mapping <- left_join(constituency_shp_mapping,party_colours,by = c("Win"="party"))
#reorder
constituency_shp_mapping <- constituency_shp_mapping[order(constituency_shp_mapping$spc16cd),]
#reset rownumbers so they line up
rownames(constituency_shp_mapping) <- 1:nrow(constituency_shp_mapping)
#calling our mapview function on the constituency_shp_mapping object
mapview(constituency_shp_mapping,
#specifying which column's information we want to show
zcol = "Win",
#and specify the colours, we can just select the relevant column
col.regions = constituency_shp_mapping$colour_code,
#and call on our barchart list to pop up
popup = popupGraph(bar_plot_list, width = 300,height =300),
legend = TRUE,
layer.name = "Party"
)
#Read in the files=----
constituency_shp<-st_read("C:\\Users\\thowag\\Desktop\\ge_scot_2021\\Scottish_Parliamentary_Constituencies_(May_2016)_Boundaries.shp")
#Libraries----
library(sf)
library(readxl)
library(dplyr)
library(tidyr)
library(mapview)
library(leaflet)
library(leafpop)
library(ggplot2)
#Read in the files=----
constituency_shp<-st_read("C:\\Users\\thowag\\Desktop\\ge_scot_2021\\Scottish_Parliamentary_Constituencies_(May_2016)_Boundaries.shp")
constituency_shp
constituency_shp <- constituency_shp %>%
select(spc16cd,spc16nm)
constituency_shp
library(rgeos)
constituency_shp <- gSimplify(constituency_shp)
?gSimplify
constituency_shp <- gSimplify(constituency_shp, tol =10)
knitr::opts_chunk$set(echo = FALSE)
#Libraries----
library(sf)
library(readxl)
library(dplyr)
library(tidyr)
library(mapview)
library(leaflet)
library(leafpop)
library(ggplot2)
library(knitr)
library(scales)
#Read in the files=----
constituency_shp<-st_read("Scottish_Parliamentary_Constituencies_(May_2016)_Boundaries.shp")
results_df <- read_excel("Electoral-Data-Results-May-2016-Scottish-Parliament-elections.xls",
sheet = 'Constituencies - Results',
range = 'A2:AA75')
#Remove some of the turnout information, not needed
results_df <- as.data.frame(results_df) %>%
select(-4:-17)
#Create a dataframe for the constituency winner----
winner_df <- results_df %>%
select(`ONS Code`,Constituency,Region,Win)
#Create a dataframe for the vote share by constituency
voteshare_df <- results_df %>%
select(-Win,-Second)
voteshare_df <- pivot_longer(voteshare_df,cols = c(4:11),names_to = "party",values_to = "share")
#Take first three letters of each party only
voteshare_df$party <- substr(voteshare_df$party,1,3)
#Create a colour code df based on the unique parties
party_colours <- as.data.frame(unique(voteshare_df$party))
colnames(party_colours)[1] <- "party"
party_colours$colour_code <- c(
#con
"#0087DC",
#lab
"#E4003B",
#lib
"#FAA61A",
#snp
"#FDF38E",
#independent - just went with a gray colour here
"#696969",
#tusc,
"#EC008C",
#grn
"#00B140",
#other, another generic gray!
"#808080")
kable(head(party_colours))
#this might not be needed for the 2021 result, but for some reason
#there is an ONS code discrepancy between the results and our constituency shapefile.
#So here I manually change some codes
constituency_shp$spc16cd[which(constituency_shp$spc16cd == "S16000147")] <- voteshare_df$`ONS Code`[which(voteshare_df$Constituency=="Glasgow Provan")][1]
constituency_shp$spc16cd[which(constituency_shp$spc16cd == "S16000148")] <- voteshare_df$`ONS Code`[which(voteshare_df$Constituency=="Strathkelvin & Bearsden")][1]
#reordering our order of codes to match the shapefile
voteshare_df <- voteshare_df[order(voteshare_df$`ONS Code`),]
#reset rownumbers so they line up
rownames(voteshare_df) <- 1:nrow(voteshare_df)
#hopefully I won't have to repeat that step for the 2021 data!
#start of our list creation
bar_plot_list <- lapply(unique(voteshare_df$`ONS Code`), function(i) {
#filter and group info per ONS code
regio_df <- voteshare_df %>%
filter(`ONS Code` == i) %>%
dplyr::ungroup() %>%
select(party,share,Constituency) %>%
filter(share >0.1) %>%
as.data.frame()
#order by the vote share
regio_df <- regio_df[order(regio_df$share,decreasing = T),]
regio_df$share <- round(regio_df$share,1)
#rejoin with the colourscheme
regio_df <- left_join(regio_df,party_colours)
#now making the bar chart!
ggplot(regio_df) +
geom_bar(aes(x = party, y = share, fill = party),
stat = "identity",
colour = "black", width =1) +
#adding the vote share as text
geom_text(aes(x = party, y = share, label = paste0(share,"%")), vjust = -0.5, size = 3.5)+
#coord_polar("y", start = 0) +
labs(x = NULL, y = NULL, fill = NULL,
title = paste(unique(regio_df$Constituency))) +
theme_classic()+
#making sure it's ordered from biggest to smallest party
scale_x_discrete(limits = regio_df$party)+
#making sure the colours are automatically matched to the corresponding party
scale_fill_manual(values = regio_df$colour_code,
limits = regio_df$party)+
#setting the theme
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black"),
legend.position = "bottom")
})
#creating the edinburgh south example using the same method as above
edi_south <- voteshare_df %>%
filter(`ONS Code` == "S16000108") %>%
dplyr::ungroup() %>%
select(party,share,Constituency) %>%
filter(share >0.1) %>%
as.data.frame()
edi_south <- left_join(edi_south,party_colours)
edi_south$share <- round(edi_south$share,1)
#reorder so it displays from biggest to smallest
edi_south <- edi_south[order(edi_south$share,decreasing = T),]
#plotting Edinburgh South to be displayed on the webpage as an example
ggplot(edi_south) +
geom_bar(aes(x = party, y = share, fill = party),
stat = "identity",
colour = "black", width =1) +
geom_text(aes(x = party, y = share, label = paste0(share,"%")), vjust = -0.5, size = 3.5)+
#coord_polar("y", start = 0) +
labs(x = NULL, y = NULL, fill = NULL,
title = paste("Constituency result",unique(edi_south$Constituency))) +
theme_classic()+
scale_x_discrete(limits = edi_south$party)+
scale_fill_manual(values = edi_south$colour_code,
limits = edi_south$party)+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black"),
legend.position = "bottom")
#joining the constiuency shapefile with the winner dataframe
constituency_shp_mapping <- left_join(constituency_shp,winner_df, by = c("spc16cd"="ONS Code"))
#the shapefile and results excel sheet had slightly different naming conventions
#for the Liberal Democrats so we have to manually change these a little.
#make it all caps
constituency_shp_mapping$Win <- toupper(constituency_shp_mapping$Win)
#Swap LD to LIB
constituency_shp_mapping$Win <- gsub("LD","LIB",constituency_shp_mapping$Win)
#Now join with the colour codes
constituency_shp_mapping <- left_join(constituency_shp_mapping,party_colours,by = c("Win"="party"))
#reorder
constituency_shp_mapping <- constituency_shp_mapping[order(constituency_shp_mapping$spc16cd),]
#reset rownumbers so they line up
rownames(constituency_shp_mapping) <- 1:nrow(constituency_shp_mapping)
#calling our mapview function on the constituency_shp_mapping object
mapview(constituency_shp_mapping,
#specifying which column's information we want to show
zcol = "Win",
#and specify the colours, we can just select the relevant column
col.regions = constituency_shp_mapping$colour_code,
#and call on our barchart list to pop up
popup = popupGraph(bar_plot_list, width = 300,height =300),
legend = TRUE,
layer.name = "Party"
)
library(distill)
create_post("Reading in multiple raster performance.")
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(tidyverse)
library(raster)
library(sf)
install.packages("microbenchmark")
list.files(lu_dir)
#
lu_dir <- "//nerclactdb.adceh.ceh.ac.uk/Projects/PROJECTS1/SPEED_Metal/Atmos_inputs/Land_Use/BELUC_outputs/run8/output_agg_1km/"
list.files(lu_dir)
length(list.files(lu_dir))
microbenchmark(
lu_stk <- list.files(lu_dir, pattern = ."tif")
microbenchmark(
lu_stk <- list.files(lu_dir, pattern = ".tif")
lu_stk <- stack(paste0(lu_dir,lu_stk))
lu_stk <- list.files(lu_dir, pattern = ".tif")
lu_stk <- stack(paste0(lu_dir,lu_stk))
microbenchmark(
lu_stk <- stack(paste0(lu_dir,lu_stk))
)
library(sf)
library(microbenchmark)
microbenchmark(
lu_stk <- stack(paste0(lu_dir,lu_stk))
)
install.packages("stars")
install.packages("stars")
knitr::opts_chunk$set(echo = FALSE)
#Libraries----
library(tidyverse)
library(raster)
library(sf)
library(microbenchmark)
#
lu_dir <- "//nerclactdb.adceh.ceh.ac.uk/Projects/PROJECTS1/SPEED_Metal/Atmos_inputs/Land_Use/BELUC_outputs/run8/output_agg_1km/"
length(list.files(lu_dir))
lu_stk <- list.files(lu_dir, pattern = ".tif")
microbenchmark(
lu_stk <- stack(paste0(lu_dir,lu_stk[10]))
)
lu_stk[10]
lu_stk[1:10]
lu_stk
lu_stk <- list.files(lu_dir, pattern = ".tif")
lu_stk
l_files[1:10]
l_files <- list.files(lu_dir, pattern = ".tif")
l_files[1:10]
microbenchmark(
s_landuse <- stack(paste0(lu_dir,l_files[1:10]))
)
l_files <- list.files(lu_dir, pattern = ".tif")
l_files <- paste0(lu_dir,l_files)
microbenchmark(
s_landuse <- stack(paste0(lu_dir,l_files[1:3]))
)
l_files
microbenchmark(
s_landuse <- stack(l_files[1:3])
)
?microbenchmark
res <- microbenchmark(
s_landuse <- stack(l_files[1:3],
times = 100L)
)
res <- microbenchmark(
s_landuse <- stack(paste0(l_files[1:3]),
times = 100L)
)
s_landuse <- stack(paste0(l_files[1:3])
s_landuse <- stack(paste0(l_files[1:3]))
l_files <- list.files(lu_dir, pattern = ".tif")
l_files <- list.files(lu_dir, pattern = ".tif")
l_files <- paste0(lu_dir,l_files)
res <- microbenchmark(
s_landuse <- stack(paste0(l_files[1:3])),
times = 100L)
stack(paste0(l_files[1:3]))
stack(l_files[1:3])
lapply(l_files[1:3], raster)
library(stars)
stars::stars(l_files[1:3])
read_stars(l_files[1:3])
#Libraries----
library(tidyverse)
library(raster)
library(sf)
library(microbenchmark)
library(stars)
install.packages("sf")
install.packages("sf")
knitr::opts_chunk$set(echo = FALSE)
#Libraries----
library(tidyverse)
library(raster)
library(sf)
library(microbenchmark)
library(stars)
