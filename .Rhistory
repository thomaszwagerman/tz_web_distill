axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5, color = "black"),
legend.position = "bottom")
#joining the constiuency shapefile with the winner dataframe
constituency_shp_mapping <- left_join(constituency_shp,winner_df, by = c("spc16cd"="ONS Code"))
#the shapefile and results excel sheet had slightly different naming conventions
#for the Liberal Democrats so we have to manually change these a little.
#make it all caps
constituency_shp_mapping$Win <- toupper(constituency_shp_mapping$Win)
#Swap LD to LIB
constituency_shp_mapping$Win <- gsub("LD","LIB",constituency_shp_mapping$Win)
#Now join with the colour codes
constituency_shp_mapping <- left_join(constituency_shp_mapping,party_colours,by = c("Win"="party"))
#reorder
constituency_shp_mapping <- constituency_shp_mapping[order(constituency_shp_mapping$spc16cd),]
#reset rownumbers so they line up
rownames(constituency_shp_mapping) <- 1:nrow(constituency_shp_mapping)
#calling our mapview function on the constituency_shp_mapping object
mapview(constituency_shp_mapping,
#specifying which column's information we want to show
zcol = "Win",
#and specify the colours, we can just select the relevant column
col.regions = constituency_shp_mapping$colour_code,
#and call on our barchart list to pop up
popup = popupGraph(bar_plot_list, width = 300,height =300),
legend = TRUE,
layer.name = "Party"
)
library(distill)
create_post("Reading in multiple raster performance.")
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(tidyverse)
library(raster)
library(sf)
install.packages("microbenchmark")
list.files(lu_dir)
#
lu_dir <- "//nerclactdb.adceh.ceh.ac.uk/Projects/PROJECTS1/SPEED_Metal/Atmos_inputs/Land_Use/BELUC_outputs/run8/output_agg_1km/"
list.files(lu_dir)
length(list.files(lu_dir))
microbenchmark(
lu_stk <- list.files(lu_dir, pattern = ."tif")
microbenchmark(
lu_stk <- list.files(lu_dir, pattern = ".tif")
lu_stk <- stack(paste0(lu_dir,lu_stk))
lu_stk <- list.files(lu_dir, pattern = ".tif")
lu_stk <- stack(paste0(lu_dir,lu_stk))
microbenchmark(
lu_stk <- stack(paste0(lu_dir,lu_stk))
)
library(sf)
library(microbenchmark)
microbenchmark(
lu_stk <- stack(paste0(lu_dir,lu_stk))
)
install.packages("stars")
install.packages("stars")
knitr::opts_chunk$set(echo = FALSE)
#Libraries----
library(tidyverse)
library(raster)
library(sf)
library(microbenchmark)
#
lu_dir <- "//nerclactdb.adceh.ceh.ac.uk/Projects/PROJECTS1/SPEED_Metal/Atmos_inputs/Land_Use/BELUC_outputs/run8/output_agg_1km/"
length(list.files(lu_dir))
lu_stk <- list.files(lu_dir, pattern = ".tif")
microbenchmark(
lu_stk <- stack(paste0(lu_dir,lu_stk[10]))
)
lu_stk[10]
lu_stk[1:10]
lu_stk
lu_stk <- list.files(lu_dir, pattern = ".tif")
lu_stk
l_files[1:10]
l_files <- list.files(lu_dir, pattern = ".tif")
l_files[1:10]
microbenchmark(
s_landuse <- stack(paste0(lu_dir,l_files[1:10]))
)
l_files <- list.files(lu_dir, pattern = ".tif")
l_files <- paste0(lu_dir,l_files)
microbenchmark(
s_landuse <- stack(paste0(lu_dir,l_files[1:3]))
)
l_files
microbenchmark(
s_landuse <- stack(l_files[1:3])
)
?microbenchmark
res <- microbenchmark(
s_landuse <- stack(l_files[1:3],
times = 100L)
)
res <- microbenchmark(
s_landuse <- stack(paste0(l_files[1:3]),
times = 100L)
)
s_landuse <- stack(paste0(l_files[1:3])
s_landuse <- stack(paste0(l_files[1:3]))
l_files <- list.files(lu_dir, pattern = ".tif")
l_files <- list.files(lu_dir, pattern = ".tif")
l_files <- paste0(lu_dir,l_files)
res <- microbenchmark(
s_landuse <- stack(paste0(l_files[1:3])),
times = 100L)
stack(paste0(l_files[1:3]))
stack(l_files[1:3])
lapply(l_files[1:3], raster)
library(stars)
stars::stars(l_files[1:3])
read_stars(l_files[1:3])
#Libraries----
library(tidyverse)
library(raster)
library(sf)
library(microbenchmark)
library(stars)
install.packages("sf")
install.packages("sf")
knitr::opts_chunk$set(echo = FALSE)
#Libraries----
library(tidyverse)
library(raster)
library(sf)
library(microbenchmark)
library(stars)
install.packages("sf")
knitr::opts_chunk$set(echo = FALSE)
#Libraries----
library(tidyverse)
library(raster)
library(sf)
library(microbenchmark)
library(stars)
lu_dir <- "//nerclactdb.adceh.ceh.ac.uk/Projects/PROJECTS1/SPEED_Metal/Atmos_inputs/Land_Use/BELUC_outputs/run8/output_agg_1km/"
length(list.files(lu_dir))
read_stars(l_files[1:3])
#Libraries----
library(tidyverse)
library(raster)
library(sf)
library(microbenchmark)
library(stars)
lu_dir <- "//nerclactdb.adceh.ceh.ac.uk/Projects/PROJECTS1/SPEED_Metal/Atmos_inputs/Land_Use/BELUC_outputs/run8/output_agg_1km/"
length(list.files(lu_dir))
l_files <- list.files(lu_dir, pattern = ".tif")
l_files <- paste0(lu_dir,l_files)
read_stars(l_files[1:3])
res <- microbenchmark(
stack_method = stack(l_files[1:3])
lapply_method = lapply(l_files[1:3], raster)
res <- microbenchmark(
stack_method = stack(l_files[1:3]),
lapply_method = lapply(l_files[1:3], raster),
stars_method = read_stars(l_files[1:3]),
times = 10
)
res
raster(l_files[1:3])
l_files
l_files[1:10]
library(ggplot2)
autplot(res)
autoplot(res)
res
res
autoplot(res)
res
```{r benchmark_plot}
autoplot(res)
res
class(res)
df_res <- as.data.frame(res)
df_res
res
df_res
res
summary(df_res)
res <- microbenchmark(
stack_method = stack(l_files[1:3]),
lapply_method = lapply(l_files[1:3], raster),
stars_method = read_stars(l_files[1:3]),
times = 10
)
df_res <- as.data.frame(res)
summary(df_res)
df_res
#the reason I'm converting to a data.frame and passing a summary() function through to kable is that
#kable (or any paged table function) doesn't provide expected output with a microbenchmark output
#see this open issue https://github.com/rstudio/rmarkdown/issues/1469
df_res <- as.data.frame(res)
l_rasters <- lapply(l_files[1:3], raster)
l_rasters
l_rasters
s_rasters <- stack(l_rasters)
s_rasters
func_apply_n_stack <- function(files_to_read){
#reading the rasters in individually, into a list object
l_rasters <- lapply(files_to_read[1:3], raster)
#then stack the read in list object into a single stack
s_rasters <- stack(l_rasters)
return(s_rasters)
func_apply_n_stack(l_files[1:3])
}
func_apply_n_stack(l_files[1:3])
stack()
stack
showMethods("stack")
knitr::opts_chunk$set(echo = FALSE)
#Libraries----
library(tidyverse)
library(raster)
library(sf)
library(microbenchmark)
library(stars)
library(ggplot2)
library(knitr)
lu_dir <- "//nerclactdb.adceh.ceh.ac.uk/Projects/PROJECTS1/SPEED_Metal/Atmos_inputs/Land_Use/BELUC_outputs/run8/output_agg_1km/"
l_files <- list.files(lu_dir, pattern = ".tif")
l_files <- paste0(lu_dir,l_files)
stars_test <- read_stars(l_files[1:3])
stars_test <- read_stars(l_files[1:3])
read_stars(l_files[1:3])
l_files[1:3]
lu_dir <- "//nerclactdb.adceh.ceh.ac.uk/Projects/PROJECTS1/SPEED_Metal/Atmos_inputs/Land_Use/BELUC_outputs/run8/output_agg_1km/"
l_files <- list.files(lu_dir, pattern = ".tif")
l_files <- list.files(lu_dir, pattern = ".tif")
l_files <- paste0(lu_dir,l_files)
l_files
l_files <- list.files(lu_dir, pattern = ".tif")
l_files
lu_dir <- "//ras250_gb//data//"
l_files <- list.files(lu_dir, pattern = ".tif")
l_files <- list.files(lu_dir, pattern = ".tif")
l_files
lu_dir <- "/ras250_gb/data/"
l_files <- list.files(lu_dir, pattern = ".tif")
l_files
lu_dir <- "~/ras250_gb/data/"
l_files <- list.files(lu_dir, pattern = ".tif")
l_files
lu_dir <- "C:\\Users\\thowag\\Documents\\tz_web_distill\\_posts\\2021-08-12-reading-in-multiple-raster-performance\\ras250_gb\data\\"
lu_dir <- "C:\\Users\\thowag\\Documents\\tz_web_distill\\_posts\\2021-08-12-reading-in-multiple-raster-performance\\ras250_gb\\data\\"
l_files <- list.files(lu_dir, pattern = ".tif")
l_files
l_files <- paste0(lu_dir,l_files)
l_files
```{r stack_method, warning = FALSE, echo = FALSE, message=FALSE, echo = TRUE, results=FALSE}
stack(l_files)
lu_dir <- "\glw\"
lu_dir <- "/glw/"
l_files <- list.files(lu_dir, pattern = ".tif")
l_files
lu_dir <- "/glw_rasters/"
l_files <- list.files(lu_dir, pattern = ".tif")
l_files
lu_dir <- "C:/Users/thowag/Documents/tz_web_distill/_posts/2021-08-12-reading-in-multiple-raster-performance/glw_rasters/glw_rasters/"
l_files <- list.files(lu_dir, pattern = ".tif")
l_files <- paste0(lu_dir,l_files)
l_files
l_files <- list.files(lu_dir, pattern = ".tif")
l_files
lu_dir <- "C:/Users/thowag/Documents/tz_web_distill/_posts/2021-08-12-reading-in-multiple-raster-performance/glw_rasters/"
l_files <- list.files(lu_dir, pattern = ".tif")
l_files
lu_dir
lu_dir <- "C:/Users/thowag/Documents/tz_web_distill/_posts/2021-08-12-reading-in-multiple-raster-performance/glw_rasters/"
l_files <- list.files(lu_dir, pattern = ".tif")
l_files
lu_dir <- "C:/Users/thowag/Documents/tz_web_distill/_posts/2021-08-12-reading-in-multiple-raster-performance/glw_rasters/"
l_files <- list.files(lu_dir, pattern = ".tif")
l_files
lu_dir <- "/glw_rasters/"
l_files <- list.files(lu_dir, pattern = ".tif")
l_files
lu_dir <- "C:/Users/thowag/Documents/tz_web_distill/_posts/2021-08-12-reading-in-multiple-raster-performance/glw_rasters/"
#lu_dir <- "/glw_rasters/"
l_files <- list.files(lu_dir, pattern = ".tif")
l_files <- paste0(lu_dir,l_files)
l_files
```{r stack_method, warning = FALSE, echo = FALSE, message=FALSE, echo = TRUE, results=FALSE}
l_files
stack(l_files[1:3])
stack(l_files)
```{r lapply_method, warning = FALSE, message=FALSE, echo = TRUE, results=FALSE}
func_apply_n_stack <- function(files_to_read){
#reading the rasters in individually, into a list object
l_rasters <- lapply(files_to_read[1:3], raster)
#then stack the read in list object into a single stack
s_rasters <- stack(l_rasters)
return(s_rasters)
}
read_stars(l_files[1:3])
stars_object <- read_stars(l_files)
stars_object
df_test <- as.data.frame(stars_object,xy=TRUE)
df_test <- as.data.frame(stars_object,xy=TRUE)
df_test
df_test <- df_test %>%
filter(!is.na(everything()))
df_test <- df_test %>%
select(1:3)
df_test
df_test <- df_test %>%
select(x,y,X5_Ct_2010_Da.tif)
df_test <- df_test %>%
dplyr::select(x,y,X5_Ct_2010_Da.tif)
df_test
df_test <- df_test %>%
dplyr::select(x,y,X5_Ct_2010_Da.tif)
df_test
dt_test
df_test <- df_test %>%
dplyr::select(x,y,X5_Ct_2010_Da.tif)
df_test
df_test <- dt_test %>%
filter(!is.na(X5_Ct_2010_Da.tif))
dt_test
df_test <- df_test %>%
dplyr::select(x,y,X5_Ct_2010_Da.tif)
df_test <- dt_test %>%
filter(!is.na(X5_Ct_2010_Da.tif))
df_test <- df_test %>%
filter(!is.na(X5_Ct_2010_Da.tif))
df_test
df_test <- df_test %>%
filter(X5_Ct_2010_Da.tif != 0)
df_test
knitr::opts_chunk$set(echo = FALSE)
#Libraries----
library(tidyverse)
library(raster)
library(sf)
library(microbenchmark)
library(stars)
library(ggplot2)
library(knitr)
lu_dir <- "C:/Users/thowag/Documents/tz_web_distill/_posts/2021-08-12-reading-in-multiple-raster-performance/glw_rasters/"
#lu_dir <- "/glw_rasters/"
l_files <- list.files(lu_dir, pattern = ".tif")
l_files <- paste0(lu_dir,l_files)
stack(l_files)
func_apply_n_stack <- function(files_to_read){
#reading the rasters in individually, into a list object
l_rasters <- lapply(files_to_read, raster)
#then stack the read in list object into a single stack
s_rasters <- stack(l_rasters)
return(s_rasters)
}
read_stars(l_files)
res <- microbenchmark(
stack_method = stack(l_files),
lapply_method = func_apply_n_stack(l_files),
stars_method = read_stars(l_files),
times = 10
)
#the reason I'm passing a summary() function through to kable is that
#kable (or any paged table function) doesn't provide expected output with a microbenchmark output
#see this open issue https://github.com/rstudio/rmarkdown/issues/1469
kable(summary(res))
autoplot(res)
```{r stars_method, warning = FALSE, message=FALSE, echo = TRUE, results=FALSE}
read_stars(l_files)
res <- microbenchmark(
stack_method = stack(l_files[1:3]),
lapply_method = func_apply_n_stack(l_files[1:3]),
stars_method = read_stars(l_files[1:3]),
times = 10
)
#the reason I'm passing a summary() function through to kable is that
#kable (or any paged table function) doesn't provide expected output with a microbenchmark output
#see this open issue https://github.com/rstudio/rmarkdown/issues/1469
kable(summary(res))
autoplot(res)
res <- microbenchmark(
stack_method = stack(l_files[1:3]),
lapply_method = func_apply_n_stack(l_files[1:3]),
stars_method = read_stars(l_files[1:3]),
times = 100
)
#the reason I'm passing a summary() function through to kable is that
#kable (or any paged table function) doesn't provide expected output with a microbenchmark output
#see this open issue https://github.com/rstudio/rmarkdown/issues/1469
kable(summary(res))
autoplot(res)
install.packages("terra")
rast(l_files)
library(terra)
rast(l_files)
raster(l_files)
res <- microbenchmark(
stack_method = stack(l_files[1:3]),
lapply_method = func_apply_n_raster(l_files[1:3]),
stars_method = read_stars(l_files[1:3]),
terra_rast = rast(l_files[1:3])
times = 100
res <- microbenchmark(
stack_method = stack(l_files[1:3]),
lapply_method = func_apply_n_raster(l_files[1:3]),
stars_method = read_stars(l_files[1:3]),
terra_rast = rast(l_files[1:3]),
times = 100
)
func_apply_n_raster <- function(files_to_read){
#reading the rasters in individually, into a list object
l_rasters <- lapply(files_to_read, raster)
#then stack the read in list object into a single stack
s_rasters <- stack(l_rasters)
return(s_rasters)
}
res <- microbenchmark(
stack_method = stack(l_files[1:3]),
lapply_method = func_apply_n_raster(l_files[1:3]),
stars_method = read_stars(l_files[1:3]),
terra_rast = rast(l_files[1:3]),
times = 100
)
#the reason I'm passing a summary() function through to kable is that
#kable (or any paged table function) doesn't provide expected output with a microbenchmark output
#see this open issue https://github.com/rstudio/rmarkdown/issues/1469
kable(summary(res))
autoplot(res)
res <- microbenchmark(
stack = stack(l_files[1:3]),
lapply_and_raster = func_apply_n_raster(l_files[1:3]),
read_stars = read_stars(l_files[1:3]),
terra_rast = rast(l_files[1:3]),
times = 100
)
#the reason I'm passing a summary() function through to kable is that
#kable (or any paged table function) doesn't provide expected output with a microbenchmark output
#see this open issue https://github.com/rstudio/rmarkdown/issues/1469
kable(summary(res))
autoplot(res)
res <- microbenchmark(
stack = stack(l_files[1:3]),
lapply_and_raster = func_apply_n_raster(l_files[1:3]),
read_stars = read_stars(l_files[1:3]),
terra_rast = rast(l_files[1:3]),
terra_lapply_rast = lapply(l_files[1:3],rast),
times = 100
)
#Libraries----
library(tidyverse)
library(raster)
library(sf)
library(microbenchmark)
library(stars)
library(ggplot2)
library(knitr)
library(terra)
lu_dir <- "C:/Users/thowag/Documents/tz_web_distill/_posts/2021-08-12-reading-in-multiple-raster-performance/glw_rasters/"
#lu_dir <- "/glw_rasters/"
l_files <- list.files(lu_dir, pattern = ".tif")
l_files <- paste0(lu_dir,l_files)
res <- microbenchmark(
stack = stack(l_files[1:3]),
lapply_and_raster = func_apply_n_raster(l_files[1:3]),
read_stars = read_stars(l_files[1:3]),
terra_rast = rast(l_files[1:3]),
terra_lapply_rast = lapply(l_files[1:3],rast),
times = 100
)
#the reason I'm passing a summary() function through to kable is that
#kable (or any paged table function) doesn't provide expected output with a microbenchmark output
#see this open issue https://github.com/rstudio/rmarkdown/issues/1469
kable(summary(res))
autoplot(res)
autoplot(res)
res <- microbenchmark(
stack = stack(l_files[1:3]),
lapply_and_raster = func_apply_n_raster(l_files[1:3]),
read_stars = read_stars(l_files[1:3]),
terra_rast = rast(l_files[1:3]),
times = 100
)
#the reason I'm passing a summary() function through to kable is that
#kable (or any paged table function) doesn't provide expected output with a microbenchmark output
#see this open issue https://github.com/rstudio/rmarkdown/issues/1469
kable(summary(res))
autoplot(res)
#Libraries----
library(tidyverse)
library(raster)
library(sf)
library(microbenchmark)
library(stars)
library(ggplot2)
library(knitr)
library(terra)
lu_dir <- "C:/Users/thowag/Documents/tz_web_distill/_posts/2021-08-12-reading-in-multiple-raster-performance/glw_rasters/"
#lu_dir <- "/glw_rasters/"
l_files <- list.files(lu_dir, pattern = ".tif")
l_files <- paste0(lu_dir,l_files)
p1 <- rast(l_files[1])
plot(p1)
l_files[1]
lu_dir <- "C:/Users/thowag/Documents/tz_web_distill/_posts/2021-08-12-reading-in-multiple-raster-performance/"
setwd(lu_dir)
getwd()
# lu_dir <- "C:/Users/thowag/Documents/tz_web_distill/_posts/2021-08-12-reading-in-multiple-raster-performance/"
lu_dir <- paste0(getwd(),"/glw_rasters/")
lu_dir
rename_post_dir("_posts/2021-08-12-benchmarking-4-methods-to-read-in-multiple-rasters")
library(distill)
rename_post_dir("_posts/2021-08-12-benchmarking-4-methods-to-read-in-multiple-rasters")
shiny::runApp('~/met_db')
install.packages("ROracel")
install.packages("ROracle")
